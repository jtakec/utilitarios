<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bot.Builder.Azure.Blobs</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Bot.Builder.Azure.Blobs.BlobsStorage">
            <summary>
            Implements <see cref="T:Microsoft.Bot.Builder.IStorage"/> using Azure Storage Blobs.
            </summary>
            <remarks>
            This class uses a single Azure Storage Blob Container.
            Each entity or <see cref="T:Microsoft.Bot.Builder.IStoreItem"/> is serialized into a JSON string and stored in an individual text blob.
            Each blob is named after the store item key,  which is encoded so that it conforms a valid blob name.
            If an entity is an <see cref="T:Microsoft.Bot.Builder.IStoreItem"/>, the storage object will set the entity's <see cref="P:Microsoft.Bot.Builder.IStoreItem.ETag"/>
            property value to the blob's ETag upon read. Afterward, an <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions"/> with the ETag value
            will be generated during Write. New entities start with a null ETag.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Azure.Blobs.BlobsStorage.#ctor(System.String,System.String,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Azure.Blobs.BlobsStorage"/> class.
            </summary>
            <param name="dataConnectionString">Azure Storage connection string.</param>
            <param name="containerName">Name of the Blob container where entities will be stored.</param>
            <param name="jsonSerializer">If passing in a custom JsonSerializer, we recommend the following settings:
            <para>jsonSerializer.TypeNameHandling = TypeNameHandling.None.</para>
            <para>jsonSerializer.NullValueHandling = NullValueHandling.Include.</para>
            <para>jsonSerializer.ContractResolver = new DefaultContractResolver().</para>
            </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Azure.Blobs.BlobsStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Deletes entity blobs from the configured container.
            </summary>
            <param name="keys">An array of entity keys.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Azure.Blobs.BlobsStorage.ReadAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Retrieve entities from the configured blob container.
            </summary>
            <param name="keys">An array of entity keys.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Azure.Blobs.BlobsStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Stores a new entity in the configured blob container.
            </summary>
            <param name="changes">The changes to write to storage.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Azure.Blobs.BlobsTranscriptStore">
            <summary>
            The blobs transcript store stores transcripts in an Azure Blob container.
            </summary>
            <remarks>
            Each activity is stored as json blob in structure of
            container/{channelId]/{conversationId}/{Timestamp.ticks}-{activity.id}.json.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Azure.Blobs.BlobsTranscriptStore.#ctor(System.String,System.String,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Azure.Blobs.BlobsTranscriptStore"/> class.
            </summary>
            <param name="dataConnectionString">Azure Storage connection string.</param>
            <param name="containerName">Name of the Blob container where entities will be stored.</param>
            <param name="jsonSerializer">If passing in a custom JsonSerializer, we recommend the following settings:
            <para>jsonSerializer.TypeNameHandling = TypeNameHandling.None.</para>
            <para>jsonSerializer.NullValueHandling = NullValueHandling.Include.</para>
            <para>jsonSerializer.ContractResolver = new DefaultContractResolver().</para>
            </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Azure.Blobs.BlobsTranscriptStore.LogActivityAsync(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Log an activity to the transcript.
            </summary>
            <param name="activity">Activity being logged.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Azure.Blobs.BlobsTranscriptStore.GetTranscriptActivitiesAsync(System.String,System.String,System.String,System.DateTimeOffset)">
            <summary>
            Get activities for a conversation (Aka the transcript).
            </summary>
            <param name="channelId">Channel Id.</param>
            <param name="conversationId">Conversation Id.</param>
            <param name="continuationToken">Continuation token to page through results.</param>
            <param name="startDate">Earliest time to include.</param>
            <returns>PagedResult of activities.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Azure.Blobs.BlobsTranscriptStore.ListTranscriptsAsync(System.String,System.String)">
            <summary>
            List conversations in the channelId.
            </summary>
            <param name="channelId">Channel Id.</param>
            <param name="continuationToken">Continuatuation token to page through results.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Azure.Blobs.BlobsTranscriptStore.DeleteTranscriptAsync(System.String,System.String)">
            <summary>
            Delete a specific conversation and all of it's activities.
            </summary>
            <param name="channelId">Channel Id where conversation took place.</param>
            <param name="conversationId">Id of the conversation to delete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>A task that represents the work queued to execute.</returns>
        </member>
    </members>
</doc>
